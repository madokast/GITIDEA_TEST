package com.zrx;

/**
 * 连接池——可以减少获取连接的次数
 *      mybatis的连接池，三种配置
 *      1. 主配置文件 dataSource typr采用何种连接池 ——
 *          POOLED —— 实现了 javax.sql.datasource ，有连接池
 *          UNPOOLED —— 没有池子 每次创建新的连接
 *          JNDI —— 采用服务器的JNDI技术，获取datasource对象
 *              tomcat dbcp
 *
 *      2. 空闲池 / 活动池
 *          如果空闲池有连接——直接拿出来用
 *          如果没有——查看活动池是否到了最大数量，然后取出最老的连接
 *
 * 事务:
 *      1. 什么是事务
 *      2. 四大特性
 *      3. 四种隔离
 *
 *      利用sql session 对象的 commit 和 rollback 实现事务的提交回滚
 *
 *
 * 动态sql
 *      sql动态变化——查询条件有可能有 有可能没有
 *      不同情况，拼接查询条件
 *
 * 多表查询
 *      表之间关系：
 *          1：1 —— 人 - id
 *          1：n —— 用户 订单
 *          n：m —— 学生 老师
 *      mybatis 把多对一看作一对一
 *      多对多关系——中间表——各自包含对方的应用。简单啊
 *
 *
 * JNDI—— Java 命名系统接口 ——路径+名称=key， 键值对
 *      tomcat
 *      配置文件
 *
 * ------------------
 *
 * 延迟加载 实现
 *      一对多中，有一个用户，有一百个账户。查用户的时候，要不要把关联的账户查出来。反之呢？
 *      需要什么功能就查多少？
 *      查账户时，用户信息都会出来
 *      但是查询用户时，只有需要使用账户时才查询 —— 按需加载
 * 立即加载
 *
 *
 * 缓存 理由
 *      存在于内存中的临时数据，减少和数据库交互的次数
 *      适用于缓存的数据：1 经常使用 2 不经常改变 3 数据正确与否对最终影响不大(缓存和数据库不一致啊)
 *          不适用于： 常变 正确与否和
 * 一级 二级缓存 配置
 *      一级缓存：sql session 对象的缓存——查询结果缓存于sql session 下的一个map中
 *          sql session 消失时 一级缓存也就消失
 *      sql session 一级缓存的清除：到调用了 update insert delete commit close 等，就会清除一级缓存
 *
 *       二级缓存：SqlSessionFactory 下
 *       SqlSessionFactory创建的大量的 sql session ，它们共享二级缓存
 *       使用方法？
 * 注解开发
 */

public class Learn {
}
